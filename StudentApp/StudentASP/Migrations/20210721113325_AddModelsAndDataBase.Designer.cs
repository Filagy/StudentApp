// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentASP;

namespace StudentASP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210721113325_AddModelsAndDataBase")]
    partial class AddModelsAndDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentASP.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("StudentASP.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentASP.Models.Student", b =>
                {
                    b.HasBaseType("StudentASP.Models.Person");

                    b.Property<int>("NumberGroup")
                        .HasColumnType("int");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentASP.Models.Teacher", b =>
                {
                    b.HasBaseType("StudentASP.Models.Person");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudentASP.Models.Subject", b =>
                {
                    b.HasOne("StudentASP.Models.Student", "Student")
                        .WithMany("Subjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentASP.Models.Student", b =>
                {
                    b.HasOne("StudentASP.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("StudentASP.Models.Student", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentASP.Models.Teacher", b =>
                {
                    b.HasOne("StudentASP.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("StudentASP.Models.Teacher", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("StudentASP.Models.Student", "Student")
                        .WithOne("TeacherClassroom")
                        .HasForeignKey("StudentASP.Models.Teacher", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentASP.Models.Student", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("TeacherClassroom");
                });
#pragma warning restore 612, 618
        }
    }
}
